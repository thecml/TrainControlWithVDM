class TrainTest is subclass of TestCase

values
	tracks = {mk_Interlocking`Track(10,5,15,5,"AB",100),
	mk_Interlocking`Track(15,5,20,5,"BC",90)};
	
	routeMap = {1 |-> mk_Interlocking`Track(10,5,15,5,"AB",100),
	2 |-> mk_Interlocking`Track(15,5,20,5,"BC",90)};
	
	track1 = mk_Interlocking`Track(10,5,15,5,"AB",100);
	track2 = mk_Interlocking`Track(15,5,20,5,"BC",90);
	
instance variables
	private uut: Train;
	private rbc: RadioBlockCenter;
	private itl: Interlocking;
	private eb1 : Eurobalise;
	private eb2 : Eurobalise;
	
operations
	public TrainTest: () ==> TrainTest
	TrainTest() ==
	(	
		itl := new Interlocking({tracks});
		eb1 := new Eurobalise(itl, track1);
		eb2 := new Eurobalise(itl, track2);
		rbc := new RadioBlockCenter({tracks}, tracks, itl);
		uut := new Train(routeMap, {track1 |-> eb1, track2 |-> eb2}, rbc, "IC1");
	);
	
	public Test_CtorCalled_TrainIsCreatedWithStartPos: () ==> ()
	Test_CtorCalled_TrainIsCreatedWithStartPos() ==
	(
		assertTrue(uut.GetPosX() = routeMap(1).startX);
		assertTrue(uut.GetPosY() = routeMap(1).startY);
	);
	
	public Test_TrackOccupieod_MoADeniedAndTrainStandingStill: () ==> ()
	Test_TrackOccupieod_MoADeniedAndTrainStandingStill() ==
	(
		itl.SetTrackState(routeMap(1), <TRAIN_ENTER>);
		uut.Start();
		assertTrue(uut.IsStarted());
		uut.Step();
		assertTrue(uut.GetSpeed() = 0);
	);
	
	public Test_TrackFree_TrainGetsMoa: () ==> ()
	Test_TrackFree_TrainGetsMoa() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		assertTrue(routeMap(1) in set uut.GetMovementAuths());
	);
	
	public Test_TrackFree_TrainGetsMoaAndEntersTrack: () ==> ()
	Test_TrackFree_TrainGetsMoaAndEntersTrack() ==
	(
		uut.Start();
		uut.Step();
		-- track is not occupied in ITL
		assertTrue(itl.GetTrackTable() = {});
		uut.Step();
		-- track is now occupied in ITL
		assertTrue(routeMap(1) in set itl.GetTrackTable());
	);
	
	public Test_TrackFree_TrainGetsMoaAndDrivesHalfWay: () ==> ()
	Test_TrackFree_TrainGetsMoaAndDrivesHalfWay() ==
	(
		dcl pointX : real := (routeMap(1).endX-routeMap(1).startX)/2;
		uut.Start();
		uut.Step();
		uut.Step();
		assertTrue(uut.GetPosX() = routeMap(1).startX+pointX);
	);
	
	public Test_TrainIsHalfWay_TrainGetsMoaForNextTrack: () ==> ()
	Test_TrainIsHalfWay_TrainGetsMoaForNextTrack() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		uut.Step();
		assertTrue(routeMap(2) in set uut.GetMovementAuths());
	);
	
	public Test_TrainIsHalfWay_TrainDrivesToEnd: () ==> ()
	Test_TrainIsHalfWay_TrainDrivesToEnd() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		uut.Step();
		assertTrue(uut.GetPosX() = routeMap(1).endX);
		assertTrue(uut.GetPosY() = routeMap(1).endY);
	);
	
	public Test_TrainIsAtTheEnd_LeavesCurrentTrack: () ==> ()
	Test_TrainIsAtTheEnd_LeavesCurrentTrack() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		assertTrue(routeMap(1) not in set itl.GetTrackTable());
	);
	
	public Test_TrainIsAtTheEnd_EntersNewTrack: () ==> ()
	Test_TrainIsAtTheEnd_EntersNewTrack() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		assertTrue(routeMap(2) in set itl.GetTrackTable());
	);
	
	public Test_TrainAtNextTrack_TrainDrivesToEnd: () ==> ()
	Test_TrainAtNextTrack_TrainDrivesToEnd() ==
	(
		uut.Start();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		uut.Step();
		assertTrue(uut.GetPosX() = routeMap(2).endX);
		assertTrue(uut.GetPosY() = routeMap(2).endY);
	);
	
end TrainTest