class World

values
	--First upper part of route
	private track1 = mk_Interlocking`Track(10,10,15,10,"U-AB",100);
	private track2 = mk_Interlocking`Track(15,10,20,10,"U-BC",100);
	private track3 = mk_Interlocking`Track(20,10,17,7,"U-CD",50);
	
	--First lower part of route
	private track4 = mk_Interlocking`Track(10,5,15,5,"L-AB",100);
	private track5 = mk_Interlocking`Track(15,5,20,5,"L-BC",100);
	private track6 = mk_Interlocking`Track(20,5,17,7,"L-CD",50);
	
	--Bridge
	private track7 = mk_Interlocking`Track(17,7,25,7,"B-AB",10);
	
	--Last upper part of route
	private track8 = mk_Interlocking`Track(25,7,28,10,"U-DE",90);
	private track9 = mk_Interlocking`Track(28,10,35,10, "U-EF",90);
	
	--Last lower part of route
	private track10 = mk_Interlocking`Track(25,7,28,5,"L-DE", 90);
	private track11 = mk_Interlocking`Track(28,5,33,5,"L-EF", 90);
	
	--five routes for all parts of the world
	private routeFU = {track1, track2, track3};
	private routeFL = {track4, track5, track6};
	private routeB = {track7};
	private routeLU = {track8, track9};
	private routeLL = {track10, track11};
	
	--all tracks in system
	private allTracks = {track1, track2, track3, track4, track5, track6,
	track7, track8, track9, track10, track11};
	
	--global interlocking system, initial empty table
	private itl = new Interlocking({});
	
	--global controller, feeds routes to ITL
	private controller = new Controller([routeFU, routeFL,
	routeB, routeLU, routeLL], itl);
	
	--global radioblockcenter, no available routes, covers all tracks
	private rbc = new RadioBlockCenter({}, allTracks, itl);
		
	-- Eurobalise maps for trains
	private trackEbMap = {track1 |-> new Eurobalise(itl, track1), track2 |-> new Eurobalise(itl, track2),
	track3 |-> new Eurobalise(itl, track3), track4 |-> new Eurobalise(itl, track4),
	track5 |-> new Eurobalise(itl, track5), track6 |-> new Eurobalise(itl, track6),
	track7 |-> new Eurobalise(itl, track7), track8 |-> new Eurobalise(itl, track8),
	track9 |-> new Eurobalise(itl, track9), track10 |-> new Eurobalise(itl, track10),
	track11 |-> new Eurobalise(itl, track11)};
	
	-- Routetables for trains
	private timeTable1 = [routeFU, routeB, routeLU];
	private timeTable2 = [routeFL, routeB, routeLL];

	-- Create trains
	private trains: seq of Train = [new Train(trackEbMap, rbc, "IC1"),
																		new Train(trackEbMap, rbc, "IC2")];
																 											 
operations
    public World: () ==> World
    World() == InitialiseSystem();
           
    private InitialiseSystem: () ==> ()
    InitialiseSystem() ==
    (
    	for route in timeTable1 do (trains(1).AddRoute(route); trains(1).Start()); 
      for route in timeTable2 do (trains(2).AddRoute(route); trains(2).Start());
    );
            
    public Run: nat ==> ()
    			 Run(stepLimit) ==
            	for all step in set { 1, ..., stepLimit } do
              (
              	controller.Step();
                Print("Step: " ^ VDMUtil`val2seq_of_char[nat](step));
                for train in trains do
                (
                	train.Step();
                	-- print stats
                	Print("Stats for train: " ^
                	VDMUtil`val2seq_of_char[seq of char](train.GetId()) ^ " @ " ^
                	VDMUtil`val2seq_of_char[seq of Train`TrainLogEntry](train.GetStats()));
                )
               );       
                    
    private Print: seq of char ==> ()
            Print(text) ==
            	def - = new IO().echo(text ^ "\n") in skip;
            	    	
end World