class Train	
types
	public State = <Running> | <Stopped> | <Finished>;
	public TrainLogEntry :: id : seq of char
													state : State
													posX : real
													posY : real

instance variables
	private posX : real;
	private posY : real;
	private currentTrack : nat;
	private route : map nat to Interlocking`Track;
	private transponders : map Interlocking`Track to Eurobalise;
	private rbc : RadioBlockCenter;
	private movementAuths : map Interlocking`Track to bool;
	private speed : real := 0;
	private started : bool := false;
	private id : seq of char := "";
	private state: State := <Stopped>;

	private timetable: seq of Interlocking`Route;
	private trainLog: seq of TrainLogEntry;
	--private currentRoute: Interlocking`Route;
	
	inv forall x in set {1, ..., card dom route-1}
	 & InvTrackIsConnected(route(x),route(x+1));
	inv card dom route = card dom transponders;
	inv forall tr in set rng route &
	 tr.startX > 0 and tr.startY > 0 and tr.endX > 0 and tr.endY > 0;
	inv started = true and speed >= 0 or started = false and speed = 0;
	inv speed <= route(currentTrack).maxSpeed;
	
operations
	public Step: () ==> ()
	Step() ==
	( 
	    Drive();
	 );
	 
	 private Drive: () ==> ()
	 Drive() ==
	 (
		if (state = <Running> and len timetable > 0) then (
			dcl currentRoute : Interlocking`Route := hd timetable;
			UpdateStats();
			if(rbc.RequestMovementAuthority(currentRoute) = <MovementAuthorityGranted>)
			then (
					UpdateStats();
					for track in GetTracksInRoute(currentRoute) do (
						dcl currentEb : Eurobalise := transponders(track);
						currentEb.Enter();
						speed := track.maxSpeed;
						posX := track.endX;
						posY := track.endY;
						UpdateStats();
					);
					timetable := tl timetable;
					UpdateStats();
			) else (
				state := <Stopped>;
				UpdateStats();
			)
		) else UpdateStats();
	 );
	 
	 private UpdateStats: () ==> ()
	 UpdateStats() ==
	 	trainLog := trainLog ^ [mk_TrainLogEntry(id, state, posX, posY)];
	 	
	 public AddRoute: Interlocking`Route ==> ()
	 AddRoute(rt) ==
	 	timetable := timetable ^ [rt];
	 	
	 public GetStats: () ==> seq of TrainLogEntry
	 GetStats() ==
	 	return trainLog;
	 	
	pure public GetTracksInRoute: Interlocking`Route ==> seq of Interlocking`Track
	GetTracksInRoute(rt) ==
		if (card rt > 0) then
		(
			dcl trs : seq of Interlocking`Track := [];
			for all tr in set rt do
				trs := trs ^ [tr];
			return trs;
		) else return [];
			
	public Start: () ==> ()
	Start() ==
		state := <Running>;
		
	public Stop: () ==> ()
	Stop() ==
		state := <Stopped>;
	
	public GetPosX: () ==> real
	GetPosX() ==
		return posX;
		
	public GetPosY: () ==> real
	GetPosY() ==
		return posY;
	
	public GetSpeed: () ==> real
	GetSpeed() ==
		return speed;
	
	public GetId: () ==> seq of char
	GetId() ==
		return id;
		
	public GetRoute: () ==> Interlocking`Route
	GetRoute() ==
		return hd timetable;
		
	public IsRunning: () ==> bool
	IsRunning() ==
		if state = <Running> then return true
		else return false;
		
	public GetMovementAuths: () ==> set of Interlocking`Track
	GetMovementAuths() ==
		return {tr | tr in set dom movementAuths & movementAuths(tr) = true};
		
	public Train: map nat to Interlocking`Track
	* map Interlocking`Track to Eurobalise * RadioBlockCenter * seq of char ==> Train
	 Train(rtmap,trans,prbc, pid) ==
	 atomic (
	 	posX := rtmap(1).startX;
	 	posY := rtmap(1).startY;
	 	currentTrack := 1;
	 	route := rtmap;
	 	transponders := trans;
	 	rbc := prbc;
	 	movementAuths := {x |-> false | x in set rng rtmap};
	 	id := pid;
	 );
	 
functions
	public InvTrackIsConnected: Interlocking`Track * Interlocking`Track -> bool
	InvTrackIsConnected(tr1, tr2) ==
		tr1.endX = tr2.startX and tr1.endY = tr2.startY;
		
end Train