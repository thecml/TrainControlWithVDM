class Train	
types
	public State = <Running> | <Stopped> | <WaitingForSignal> | <Finished>;
	public TrainLogEntry :: id : seq of char
													state : State
													posX : real
													posY : real

instance variables
	private posX : nat := 0;
	private posY : nat := 0;
	private currentSpeed : nat := 0;
	private transponders : map Interlocking`Track to Eurobalise := {|->};
	private id : seq of char := "";
	private state: State := <Stopped>;
	private routeTable: seq of Interlocking`Route := [];
	private trainLog: seq of TrainLogEntry := [];
	private rbc : RadioBlockCenter;
--	inv forall rt in seq routeTable & InvTrackIsConnected(rt);
	inv state = <Running> and currentSpeed >= 0
	 or state = <Stopped> and currentSpeed = 0
	 or state = <WaitingForSignal> and currentSpeed = 0
	 or state = <Finished> and currentSpeed = 0;

operations
	public Step: () ==> ()
	Step() ==
 		Drive();
	 
	private Drive: () ==> ()
	Drive() ==
	 (
		if (len routeTable > 0
		 and state = <Running> or state = <WaitingForSignal>) then (
			dcl currentRoute : Interlocking`Route := hd routeTable;
			UpdateStats();
			if(rbc.RequestMovementAuthority(currentRoute) = <MovementAuthorityGranted>)
			then (
					UpdateStats();
					for track in GetTracksInRoute(currentRoute) do (
						dcl currentEb : Eurobalise := transponders(track);
						atomic (state := <Running>; currentSpeed := currentEb.Enter());
						posX := track.endX;
						posY := track.endY;
						currentEb.Leave();
						UpdateStats();
					);
					routeTable := tl routeTable;
					UpdateStats();
			) else (
				currentSpeed := 0;
				state := <WaitingForSignal>;
				UpdateStats();
			)
		) else (currentSpeed := 0;
					  state := <Finished>;
					  UpdateStats();)
	 );
	 
	private UpdateStats: () ==> ()
	UpdateStats() ==
	 (
	 	 	if(len trainLog > 3) then
	 			trainLog := tl trainLog;
	 		trainLog := trainLog ^ [mk_TrainLogEntry(id, state, posX, posY)];
	 );
	 	
	public AddRoute: Interlocking`Route ==> ()
	AddRoute(rt) ==
	 	routeTable := routeTable ^ [rt]
	 pre card rt > 0
	 post rt in set elems routeTable;
	 	
	pure public GetStats: () ==> seq of TrainLogEntry
	GetStats() ==
		return trainLog;
	 	
	pure public GetTracksInRoute: Interlocking`Route ==> seq of Interlocking`Track
	GetTracksInRoute(rt) ==
		if (card rt > 0) then (
			dcl trs : seq of Interlocking`Track := [];
			for all tr in set rt do
				trs := trs ^ [tr];
			return trs;
		) else return [];
			
	public Start: () ==> ()
	Start() ==
		state := <Running>;
		
	public Stop: () ==> ()
	Stop() ==
		state := <Stopped>;
		
	public GetId: () ==> seq of char
	GetId() ==
		return id;
		
	public IsRunning: () ==> bool
	IsRunning() ==
		if state = <Running> then return true
		else return false;
		
	public Train: map Interlocking`Track to Eurobalise
	 * RadioBlockCenter * seq of char ==> Train
	 Train(trans, prbc, pid) ==
	 atomic (
	 	transponders := trans;
	 	rbc := prbc;
	 	id := pid;
	 );
	 
functions
--	public InvTrackIsConnected: Interlocking`Route -> bool
--	InvTrackIsConnected(rt) ==
--		forall tr1,tr2 in set rt & tr1 <> tr2 =>
--		 tr1.endX = tr2.startX and tr1.endY = tr2.startY;
		
end Train