class Train	
instance variables
	private posX : real;
	private posY : real;
	private currentTrack : nat;
	private route : map nat to Interlocking`Track;
	private transponders : map Interlocking`Track to Eurobalise;
	private rbc : RadioBlockCenter;
	private movementAuths : map Interlocking`Track to bool;
	--private maxSpeed : nat;
	--private speed : nat := 0;
	private running : bool := false;
	
	inv forall x in set {1, ..., card dom route-1}
	 & InvTrackIsConnected(route(x),route(x+1));
	inv card dom route = card dom transponders;
	--inv speed > 0 and running = true or speed = 0 and running = false;
	--inv speed <= maxSpeed;
	
operations
	public Step: () ==> ()
	Step() ==
	(
		Drive();
	);
	
	-- Drive() performs one iteration of moving the train
	private Drive: () ==> ()
	Drive() ==
	(
		-- continue if there is track to traverse
		if(currentTrack < card dom route and running) then
		(
			dcl currentEb : Eurobalise := transponders(route(currentTrack));
			dcl distX : real := route(currentTrack).endX-posX;
			dcl distY : real := route(currentTrack).endY-posY;
			-- make sure we have MoA for current track
			if (movementAuths(route(currentTrack))) then (
				-- check where the train is currently
				if (posX = route(currentTrack).startX and posY = route(currentTrack).startY)
				then (
					-- dcl dist : nat := MATH`sqrt(((posX-endpx)**2)+((posY-endpy)**2));
					-- enter track
					currentEb.Enter();
					-- drive train halfway
					if (distX = 0 and distY <> 0) then ( posY := posY + distY/2; )
					else if (distY = 0 and distX <> 0) then ( posX := posX + distX/2; )
					else if (distY <> 0 and distX <> 0) then
					(
						posY := posY + distY/2;
						posX := posX + distX/2;
					);
				) else if (
					posX = route(currentTrack).endX and posY = route(currentTrack).endY
				) then (
					-- move onto next track
					currentEb.Leave();
					currentTrack := currentTrack+1;
				) else (
					-- we are halfway through. request MoA
					if(rbc.RequestMovementAuthority(route(currentTrack))
					 = <MovementAuthorityGranted>) then (
						movementAuths := movementAuths munion {tr |-> true | tr in set rng route};
					);
					-- drive the remaining of the way
					if (distX = 0 and distY <> 0) then ( posY := posY + distY; )
					else if (distY = 0 and distX <> 0) then ( posX := posX + distX; )
					else if (distX <> 0 and distY <> 0) then
					(
						posY := posY + distY;
						posX := posX + distX;
					);
				);
			) else (
				if(rbc.RequestMovementAuthority(route(currentTrack))
				 = <MovementAuthorityGranted>) then (
					movementAuths := movementAuths munion {tr |-> true | tr in set rng route};
					running := true;
				) else (
					running := false;
				)
			)
		) else (
			-- train has reached end of route
			running := false
		)
	);
			
	public Start: () ==> ()
	Start() ==
		running := true;
		
	public Stop: () ==> ()
	Stop() ==
	(
		running := false;
	);
	
	public GetPosX: () ==> nat
	GetPosX() ==
		return posX;
		
	public GetPosY: () ==> nat
	GetPosY() ==
		return posY;
		
	public IsRunning: () ==> bool
	IsRunning() ==
		return running;
		
	public Train: map nat to Interlocking`Track
	* map Interlocking`Track to Eurobalise * RadioBlockCenter ==> Train
	 Train(rtmap,trans,prbc) ==
	 atomic (
	 	posX := rtmap(1).startX;
	 	posY := rtmap(1).startY;
	 	currentTrack := 1;
	 	route := rtmap;
	 	transponders := trans;
	 	rbc := prbc;
	 	movementAuths := {x |-> false | x in set rng rtmap};
	 );
	 
functions
	public InvTrackIsConnected: Interlocking`Track * Interlocking`Track -> bool
	InvTrackIsConnected(tr1, tr2) ==
		tr1.endX = tr2.startX and tr1.endY = tr2.startY;
		
end Train