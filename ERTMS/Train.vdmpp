class Train	
instance variables
	private posX : real;
	private posY : real;
	private currentTrack : nat;
	private route : map nat to Interlocking`Track;
	private transponders : map Interlocking`Track to Eurobalise;
	private rbc : RadioBlockCenter;
	private movementAuths : map Interlocking`Track to bool;
	private maxSpeed : real;
	private speed : real := 0;
	private started : bool := false;
	
	inv forall x in set {1, ..., card dom route-1}
	 & InvTrackIsConnected(route(x),route(x+1));
	inv card dom route = card dom transponders;
	inv started = true and speed >= 0 or started = false and speed = 0;
	inv speed <= maxSpeed;
	
operations
	public Step: () ==> ()
	Step() ==
	( Drive(); );
	
	-- Drive() performs one iteration of moving the train
	private Drive: () ==> ()
	Drive() ==
	( -- continue if there is track to traverse
		if(currentTrack <= card dom route and started) then
		(
			dcl currentEb : Eurobalise := transponders(route(currentTrack));
			dcl distX : real := route(currentTrack).endX-posX;
			dcl distY : real := route(currentTrack).endY-posY;
			-- make sure we have MoA for current track
			if (movementAuths(route(currentTrack))) then (
				-- check where the train is currently
				if (posX = route(currentTrack).startX and posY = route(currentTrack).startY)
				then (
					-- enter track and drive halfway
					currentEb.Enter();
					if (distX = 0 and distY <> 0) then ( posY := posY + distY/2; )
					else if (distY = 0 and distX <> 0) then ( posX := posX + distX/2; )
					else if (distY <> 0 and distX <> 0) then
					( posY := posY + distY/2; posX := posX + distX/2; );
				) else if (posX = route(currentTrack).endX and posY = route(currentTrack).endY)
				then (
					-- move onto next track, set max speed
					currentEb.Leave();
					currentTrack := currentTrack+1;
					speed := route(currentTrack).maxSpeed;
					maxSpeed := route(currentTrack).maxSpeed;
				) else (
					-- we are midway. request MoA for next track, if there is such
					if (card dom route > currentTrack) then (
						if(rbc.RequestMovementAuthority(route(currentTrack+1))
					 		= <MovementAuthorityGranted>) then (
								movementAuths := movementAuths munion {tr |-> true | tr in set rng route};
							)
					);
					-- drive the remaining way
					if (distX = 0 and distY <> 0) then ( posY := posY + distY; )
					else if (distY = 0 and distX <> 0) then ( posX := posX + distX; )
					else if (distX <> 0 and distY <> 0) then
					( posY := posY + distY; posX := posX + distX; );
				);
			) else (
				if(rbc.RequestMovementAuthority(route(currentTrack)) = <MovementAuthorityGranted>)
				then (
					movementAuths := movementAuths ++ {tr |-> true | tr in set rng route};
					started := true;
				) else (
					speed := 0; started := false;
				)
			)
		) else (
			-- train has reached end of route, shutdown
			speed := 0; started := false
		)
	);
			
	public Start: () ==> ()
	Start() ==
		started := true;
		
	public Stop: () ==> ()
	Stop() ==
		started := false;
	
	public GetPosX: () ==> real
	GetPosX() ==
		return posX;
		
	public GetPosY: () ==> real
	GetPosY() ==
		return posY;
		
	public IsStarted: () ==> bool
	IsStarted() ==
		return started;
		
	public GetMovementAuths: () ==> set of Interlocking`Track
	GetMovementAuths() ==
		return {tr | tr in set dom movementAuths & movementAuths(tr) = true};
		
	public Train: map nat to Interlocking`Track
	* map Interlocking`Track to Eurobalise * RadioBlockCenter ==> Train
	 Train(rtmap,trans,prbc) ==
	 atomic (
	 	posX := rtmap(1).startX;
	 	posY := rtmap(1).startY;
	 	maxSpeed := rtmap(1).maxSpeed;
	 	currentTrack := 1;
	 	route := rtmap;
	 	transponders := trans;
	 	rbc := prbc;
	 	movementAuths := {x |-> false | x in set rng rtmap};
	 );
	 
functions
	public InvTrackIsConnected: Interlocking`Track * Interlocking`Track -> bool
	InvTrackIsConnected(tr1, tr2) ==
		tr1.endX = tr2.startX and tr1.endY = tr2.startY;
		
end Train