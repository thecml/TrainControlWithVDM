class RadioBlockCenter
types
	public MovementAuthorityMessage = <MovementAuthorityGranted> | <MovementAuthorityDenied>;

instance variables
	private responsibleTracks : set of Interlocking`Track;
	private availableRoutes : set of Interlocking`Route; -- from interlocking
	private designatedRoutes : set of Interlocking`Route; -- from trains
	private busyTracks : map Interlocking`Track to bool; -- from interlocking
	private movementAuthorites : map nat to seq of Interlocking`Track;
	private interlocking  : Interlocking;
	
	inv card availableRoutes < 2 or forall rt in set availableRoutes
		& Interlocking`InvNoDuplicateTrack(rt);

operations
	public RequestMovementAuthority: (Interlocking`Track) ==> MovementAuthorityMessage -- from train
	RequestMovementAuthority(tr) ==
		if(tr in set responsibleTracks and {tr} in set availableRoutes and busyTracks(tr) = false)
		then (
			if (interlocking.RequestToProceed({tr}) = <PROCEED_GRANTED>)
			then (
				designatedRoutes := designatedRoutes union {{tr}};
				return <MovementAuthorityGranted>;
			) else return <MovementAuthorityDenied>;
		) else return <MovementAuthorityDenied>;
	
	public SetRouteAsAvailable: Interlocking`Route ==> ()
	SetRouteAsAvailable(rt) ==
		let track in set rt
		in (
			busyTracks(track) := false;
			availableRoutes := availableRoutes union {{track}}
		);
	
	public GetResponsibleTracks: () ==> set of Interlocking`Track
	GetResponsibleTracks() ==
		return responsibleTracks;
	
	public RadioBlockCenter : set of Interlocking`Route  * set of Interlocking`Track * Interlocking
	  ==> RadioBlockCenter
	RadioBlockCenter(rts,trs,itl) ==
	atomic (
		availableRoutes := rts;
		responsibleTracks := trs;
		interlocking := itl;
		designatedRoutes := {};
		busyTracks := {|->};
		movementAuthorites := {|->};
	);
		
functions
	private IsTrackInSetOfTracks: Interlocking`Track * set of Interlocking`Track -> bool
	IsTrackInSetOfTracks(tr,trs) ==
		tr in set trs;

	private IsTrackInRoute: Interlocking`Track * Interlocking`Route -> bool
	IsTrackInRoute(tr, rt) ==
			forall rtt in set rt & tr = rtt
		pre card rt > 0;

	private IsTrackOccupied: Interlocking`Track * map Interlocking`Track to bool -> bool
	IsTrackOccupied(tr,routemap) ==
		routemap(tr) = false
		pre tr in set dom routemap;
	
	private GetBusyTracks: map Interlocking`Track to bool -> set of Interlocking`Track
	GetBusyTracks(trmap) ==
		{tr | tr in set dom trmap & trmap(tr) = false}
		
end RadioBlockCenter