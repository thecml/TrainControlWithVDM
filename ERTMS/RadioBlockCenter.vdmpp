class RadioBlockCenter
types
	public MovementAuthorityMessage = <MovementAuthorityGranted> | <MovementAuthorityDenied>;

instance variables
	private responsibleTracks : set of Track;
	private availableRoutes : set of Interlocking`Route; -- from interlocking
	private designatedRoutes : set of Interlocking`Route; -- from trains
	private trackOccupied : map Track to bool; -- from interlocking
	private movementAuthorites : map nat to seq of Track;
	private interlocking  : Interlocking;
	
	inv card availableRoutes < 2 or Interlocking`InvNoDuplicateTrack(availableRoutes);

operations
	public Step: () ==> ()
	Step() ==
		is not yet specified;

	public RequestMovementAuthority: (Track) ==> MovementAuthorityMessage -- from train
	RequestMovementAuthority(tr) ==
	-- check if this RBC is responsible for this request
		-- check if the track is in the set of tracks in available routes and not in the set of occupied routes
			-- if so, ask interlocking for request to proceed for that track
					-- if granted, create a set with track and add it to designatedRoutes,
					-- lock it in designatedRoutes and reply to train with MovementAuthorityGranted
			--return MovementAuthorityDenied
		-- return MovementAuthorityDenied 
		is not yet specified;
		
	public SetRouteAsAvailable: Interlocking`Route ==> ()
	SetRouteAsAvailable(rt) ==
		let track in set rt
		in (
			trackOccupied(track) := false;
			availableRoutes := availableRoutes union {{track}}
		);
	
	public GetResponsibleTracks: () ==> set of Track
	GetResponsibleTracks() ==
		return responsibleTracks;
	
	public RadioBlockCenter : set of Interlocking`Route
	 * set of Track * Interlocking
	  ==> RadioBlockCenter
	RadioBlockCenter(rts,trs,itl) ==
	(
		availableRoutes := rts;
		responsibleTracks := trs;
		interlocking := itl;
		designatedRoutes := {};
		trackOccupied := {|->};
		movementAuthorites := {|->};
	);
		
functions
	private IsTrackInSetOfTracks: Track * set of Track -> bool
	IsTrackInSetOfTracks(tr,trs) ==
		tr in set trs;

	private IsTrackInRoute: Track * Interlocking`Route -> bool
	IsTrackInRoute(tr, rt) ==
			forall rtt in set rt & tr <> rtt => tr.fromCoord.x <> rtt.fromCoord.x
				or tr.fromCoord.y <> rtt.fromCoord.y
				or tr.toCoord.x <> rtt.toCoord.x
				or tr.toCoord.y <> rtt.toCoord.y
		pre card rt > 0;

	private IsTrackOccupied: Track * map Track to bool -> bool
	IsTrackOccupied(tr,routemap) ==
		routemap(tr) = false
		pre tr in set dom routemap;
	
	private GetOccupiedTracks: map Track to bool -> set of Track
	GetOccupiedTracks(trmap) ==
		{tr | tr in set dom trmap & trmap(tr) = false}
		
end RadioBlockCenter