class RadioBlockCenter
types
	public MovementAuthorityReply = <MovementAuthorityGranted> | <MovementAuthorityDenied>;

instance variables
	private responsibleTracks : set of Interlocking`Track;
	private availableRoutes : set of Interlocking`Route; -- from interlocking
	private movementAuthorites : map nat to seq of Interlocking`Track;
	private itl : Interlocking;
	
	inv card availableRoutes < 2 or Interlocking`InvNoDuplicateTrack(availableRoutes);

operations	
	public RequestMovementAuthority: Interlocking`Track ==> MovementAuthorityReply
	RequestMovementAuthority(tr) ==
		let rt in set availableRoutes in
			if(tr in set responsibleTracks and tr in set rt)
			then (
				dcl msg : Interlocking`Order;
				def mk_Interlocking`ProceedReply(message,rtr) = itl.RequestToProceed({tr})
				in
				(
					msg := message;
					availableRoutes := rtr;
				);
				if (msg = <PROCEED_GRANTED>)
				then (
					return <MovementAuthorityGranted>;
				) else (
					availableRoutes := {rt | art in set availableRoutes & art inter {tr} = {}};
					return <MovementAuthorityDenied>;
			)
		) else return <MovementAuthorityDenied>;
		
	private UpdateAvailableRoutes: () ==> ()
	UpdateAvailableRoutes() ==
		availableRoutes := itl.GetAvaliableRoutes(responsibleTracks);
		
	public GetAvailableRoutes: () ==> set of Interlocking`Route
	GetAvailableRoutes() ==
		return availableRoutes;
	
	public GetResponsibleTracks: () ==> set of Interlocking`Track
	GetResponsibleTracks() ==
		return responsibleTracks;
	
	public RadioBlockCenter : set of Interlocking`Route
	 * set of Interlocking`Track * Interlocking ==> RadioBlockCenter
	RadioBlockCenter(rts,trs,pitl) ==
	atomic (
		availableRoutes := rts;
		responsibleTracks := trs;
		itl := pitl;
		movementAuthorites := {|->};
	);
		
functions
	public IsTrackInSetOfTracks: Interlocking`Track * set of Interlocking`Track -> bool
	IsTrackInSetOfTracks(tr,trs) ==
		tr in set trs;

	public IsTrackInRoute: Interlocking`Track * Interlocking`Route -> bool
	IsTrackInRoute(tr, rt) ==
		forall rtt in set rt & tr = rtt
	pre card rt > 0;

	public IsTrackOccupied: Interlocking`Track * map Interlocking`Track to bool -> bool
	IsTrackOccupied(tr,routemap) ==
		routemap(tr) = false
	pre tr in set dom routemap;
		
end RadioBlockCenter